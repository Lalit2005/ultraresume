generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  gh_username   String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id                     String        @id @default(cuid())
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  createdBy              String
  publicId               String        @unique
  name                   String
  email                  String
  skillSet               String?       @db.LongText
  about                  String?       @db.LongText
  description            String        @db.LongText
  profile_pic            String?       @db.LongText
  footer_text            String?       @db.LongText
  location               String?       @db.LongText
  template               String
  inShowcase             Boolean       @default(false)
  socialLinks            SocialLinks[]
  experience1Title       String?       @db.LongText
  experience1Description String?       @db.LongText
  experience2Title       String?       @db.LongText
  experience2Description String?       @db.LongText
  experience3Title       String?       @db.LongText
  experience3Description String?       @db.LongText
  education1Title        String?       @db.LongText
  education1Description  String?       @db.LongText
}

model SocialLinks {
  id     String @id @default(cuid())
  text   String
  resume Resume @relation(fields: [id], references: [id], onDelete: Cascade)
}
