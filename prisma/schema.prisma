generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  gh_username   String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String
  name        String
  email       String
  skillSet    String?       @db.LongText
  about       String?       @db.LongText
  description String        @db.LongText
  profile_pic String?       @db.LongText
  footer_text String?       @db.LongText
  location    String?       @db.LongText
  template    String
  inShowcase  Boolean       @default(false)
  socialLinks SocialLinks[]
  projects    Project[]
  positions   Position[]
  Experience  Experience[]
  Education   Education[]
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String
  link        String
  ghLink      String?
  image       String
  resume      Resume  @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Position {
  id          String @id @default(cuid())
  title       String
  description String @db.LongText
  resume      Resume @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Experience {
  id          String @id @default(cuid())
  title       String
  description String
  resume      Resume @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Education {
  id          String @id @default(cuid())
  period      String
  title       String
  description String
  resume      Resume @relation(fields: [id], references: [id], onDelete: Cascade)
}

model SocialLinks {
  id          String @id @default(cuid())
  text        String
  description String @db.LongText
  resume      Resume @relation(fields: [id], references: [id], onDelete: Cascade)
}
